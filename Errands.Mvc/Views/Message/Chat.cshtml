@model Errands.Mvc.Models.ChatDataViewModel
<style>
    .chat__block {
        height: 700px;
    }
</style>
<div class="chat">
    @*<p>SenderUser: @Model.SenderUser.Id</p>
    <p>SenderUser id: @Model.SenderUser.UserName</p>
    <p>ReceiverUser: @Model.ReceiverUser.UserName</p>
    <p>ReceiverUser id: @Model.ReceiverUser.Id</p>*@
    <div class="chat__head">
        <span class="menu__user-logo">
            @if (Model.ReceiverUser.Logo != null)
            {
                <img src="~/@Model.ReceiverUser.Logo.Path" alt="Alternate Text" />
            }
            else
            {
                <img src="~/src/img/w128h1281338911651user.png" alt="Alternate Text" />
            }
        </span>
        <a class="chat__receiver-name" href="#">Receiver User Name</a>
    </div>
    <div class="chat__block" id="message-body">
        <div class="chat__chatroom" id="chatroom">
            
        </div>
    </div>
    <div class="chat__input-block" id="input-form">
        <input class="chat__input" type="text" id="message-input" placeholder="Input message" />
        <input class="chat__send" type="button" id="send-btn" disabled value="Send" />
    </div>
</div>

<script src="~/src/js/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script>
    let receiverUserId = `@Model.ReceiverUser.Id`;
    let senderUserId = `@Model.SenderUser.Id`;
    let senderUserName = `@Model.SenderUser.UserName`;
    let receiverUserName = `@Model.ReceiverUser.UserName`;
    let chatId = `@Model.ChatId`;
    //move scroll always down
    let chatBody = document.querySelector('#message-body');
    
    class LocationMessage {
        static get InStartChat () {
            return 0;
        }
        static get InEndChat () {
            return 1;
        }
    }

    function initializeChat() {
        let messages = downloadMessages(chatId, 40, 0);

        messages.forEach(function(m) {
            //console.log(m.content + m.senderId);
            let userName = getUserNameById(m.senderId);
            createMessageInChat(userName, m.content, LocationMessage.InEndChat);
        });
        chatBody.scrollTop = chatBody.scrollHeight - chatBody.clientHeight;
    }
    initializeChat();

    function getUserNameById(userIdentity) {
        if (userIdentity === senderUserId) {
            return senderUserName;
        } else if (userIdentity === receiverUserId) {
            return receiverUserName;
        } else {
            return 'Anonymous';
        }
    }
    function downloadMessages(chatId, countMessages ,skipMessages) {
        var request = new XMLHttpRequest();

        request.open("POST", "/Message/LoadMessages", false);
        request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        request.send("chatId=" + chatId +
            "&countMessages=" + countMessages +
            "&skipMessages=" + skipMessages);
        let messages;
        if (request.status < 400) {
               let data = request.response;
               messages = JSON.parse(data);
        }
        else {
               console.log("Status", request.status);
               console.log(request.responseText);
        }
        return messages;
    }
    function createMessageInChat(userName, contextMessage, locationMessage) {
        //location chat has be enum LocationMessage
        let userNameElem = document.createElement("b");
        userNameElem.appendChild(document.createTextNode(userName + ": "));
        let contentMessageElem = document.createElement('span');
        contentMessageElem.appendChild(document.createTextNode(contextMessage));

        let elem = document.createElement("p");
        elem.classList.add('message');
        if (userName === senderUserName) {
            elem.classList.add('message-right');
        }else if (userName === receiverUserName) {
            elem.classList.add('message-left');
        }
        elem.appendChild(userNameElem);
        elem.appendChild(contentMessageElem);
        if (locationMessage === LocationMessage.InStartChat) {
            var firstChild = document.getElementById("chatroom").firstChild;
            document.getElementById("chatroom").insertBefore(elem, firstChild);
        }if(locationMessage === LocationMessage.InEndChat) {
            var lastChild = document.getElementById("chatroom").lastChild;
            document.getElementById("chatroom").insertBefore(elem, lastChild);
        }
        //chatBody.scrollTop = chatBody.scrollHeight - chatBody.clientHeight;
    }
    //
    function downloadOldMessages()
    {
        let countMessages = document.querySelectorAll('.message').length;
        console.log(countMessages);
        if (countMessages > 9) {
            let chatroom = document.querySelector('#chatroom');
            let buttonDLMore = document.createElement("input");
            buttonDLMore.classList.add('chat__download-messages');
            buttonDLMore.setAttribute("id", "download-messages");
            buttonDLMore.setAttribute("type", "button");
            buttonDLMore.value = "download more";
            chatroom.appendChild(buttonDLMore);

            var firstChild = document.getElementById("chatroom").firstChild;
            document.getElementById("chatroom").insertBefore(buttonDLMore, firstChild);
        }
            let scrollPosition = 150;
        document.getElementById("download-messages").addEventListener("click", function (e) {
            let messages = downloadMessages(chatId, 10, document.querySelectorAll('.message').length);
            //console.log('skip message' + document.querySelectorAll('.message').length);
            
            messages.reverse().forEach(function(m) {
                //console.log(m.content + m.senderId);
                console.log(scrollPosition);
                let userName = getUserNameById(m.senderId);
                createMessageInChat(userName, m.content, LocationMessage.InStartChat);
                chatBody.scrollTop = 0;
                var firstChild = document.getElementById("chatroom").firstChild;
                document.getElementById("chatroom").insertBefore(document.getElementById('download-messages'), firstChild);
                chatBody.scrollTop = scrollPosition;
            });
        });
    }
    downloadOldMessages();
    

    //disable btn if input empty
    let sendBtn = document.querySelector('#send-btn');
    let inputForm = document.querySelector('#input-form');
    let inputs = [...inputForm.querySelectorAll('#message-input')];
    inputForm.addEventListener('input',
        function() {
            let isIncomplete = inputs.some(input => !input.value);
            sendBtn.disabled = isIncomplete;
            sendBtn.style.cursor = isIncomplete ? 'not-allowed' : 'pointer';
        }
    );

    //
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/messages", { accessTokenFactory: () => `@Model.SenderUser.Id` })
        .build();
    hubConnection.on("Receive", function (message, userName) {
        createMessageInChat(userName, message, LocationMessage.InEndChat);
        chatBody.scrollTop = chatBody.scrollHeight - chatBody.clientHeight;
    });
    hubConnection.start();

    // send message to server
    document.getElementById("send-btn").addEventListener("click", function (e) {
        let message = document.getElementById("message-input").value;
        let to = `@Model.ReceiverUser.Id`;
        hubConnection.invoke("Send", message, to, `@Model.ChatId`);
        document.getElementById("message-input").value = "";
    });
    
</script>